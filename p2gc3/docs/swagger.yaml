basePath: /
definitions:
  dto.CreateOrUpdateWorkoutRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  dto.ExerciseCreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      workout_id:
        type: integer
    required:
    - description
    - name
    - workout_id
    type: object
  dto.ExerciseLogRequest:
    properties:
      created_at:
        type: string
      exercise_id:
        type: integer
      rep_count:
        type: integer
      set_count:
        type: integer
      weight:
        type: integer
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.UserRegisterRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
      height:
        type: integer
      password:
        type: string
      weight:
        type: integer
    required:
    - email
    - full_name
    - height
    - password
    - weight
    type: object
  dto.WorkoutByIDResponse:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/model.Exercise'
        type: array
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  dto.WorkoutDTO:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.WorkoutResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  model.Exercise:
    properties:
      description:
        type: string
      exerciseLogs:
        items:
          $ref: '#/definitions/model.ExerciseLog'
        type: array
      id:
        type: integer
      name:
        type: string
      workout:
        $ref: '#/definitions/model.Workout'
      workoutID:
        type: integer
    type: object
  model.ExerciseLog:
    properties:
      created_at:
        type: string
      exercise:
        $ref: '#/definitions/model.Exercise'
      exerciseID:
        description: FK to Exercise
        type: integer
      id:
        type: integer
      repCount:
        type: integer
      setCount:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      userID:
        description: FK to User
        type: integer
      weight:
        type: integer
    type: object
  model.User:
    properties:
      email:
        type: string
      full_name:
        type: string
      height:
        type: integer
      id:
        type: integer
      weight:
        type: integer
    type: object
  model.Workout:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/model.Exercise'
        type: array
      id:
        type: integer
      name:
        type: string
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for managing users, workouts, exercises, and logs.
  title: Fitness Tracker API
  version: "1.0"
paths:
  /api/workouts:
    get:
      description: Retrieves all workouts for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.WorkoutResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all workouts
      tags:
      - workouts
    post:
      consumes:
      - application/json
      description: Creates a workout with name and description
      parameters:
      - description: Workout data
        in: body
        name: workout
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrUpdateWorkoutRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.WorkoutResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new workout
      tags:
      - workouts
  /api/workouts/{id}:
    delete:
      description: Deletes a workout and all associated exercises and logs
      parameters:
      - description: Workout ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.WorkoutDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a workout
      tags:
      - workouts
    get:
      description: Retrieves a specific workout with exercises
      parameters:
      - description: Workout ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WorkoutByIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get workout by ID
      tags:
      - workouts
    put:
      consumes:
      - application/json
      description: Updates workout name and description
      parameters:
      - description: Workout ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated workout data
        in: body
        name: workout
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrUpdateWorkoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.WorkoutDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a workout
      tags:
      - workouts
  /exercise-logs:
    post:
      consumes:
      - application/json
      description: Logs an exercise with set, rep, and weight
      parameters:
      - description: Exercise log data
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/dto.ExerciseLogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create an exercise log
      tags:
      - exercise-logs
  /exercise-logs/{id}:
    delete:
      description: Deletes an exercise log by its ID
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an exercise log
      tags:
      - exercise-logs
  /exercises:
    post:
      consumes:
      - application/json
      description: Adds a new exercise to the database
      parameters:
      - description: Exercise payload
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/dto.ExerciseCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new exercise
      tags:
      - exercises
  /exercises/{id}:
    delete:
      description: Deletes an exercise by ID
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an exercise
      tags:
      - exercises
  /users:
    get:
      description: Returns the authenticated user's data, BMI, and weight category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get authenticated user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns JWT
      parameters:
      - description: Login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: Register payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - users
swagger: "2.0"
